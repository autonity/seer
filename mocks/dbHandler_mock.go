// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/dbHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "Seer/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseHandler is a mock of DatabaseHandler interface.
type MockDatabaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseHandlerMockRecorder
}

// MockDatabaseHandlerMockRecorder is the mock recorder for MockDatabaseHandler.
type MockDatabaseHandlerMockRecorder struct {
	mock *MockDatabaseHandler
}

// NewMockDatabaseHandler creates a new mock instance.
func NewMockDatabaseHandler(ctrl *gomock.Controller) *MockDatabaseHandler {
	mock := &MockDatabaseHandler{ctrl: ctrl}
	mock.recorder = &MockDatabaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseHandler) EXPECT() *MockDatabaseHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseHandler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseHandler)(nil).Close))
}

// Flush mocks base method.
func (m *MockDatabaseHandler) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockDatabaseHandlerMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDatabaseHandler)(nil).Flush))
}

// LastProcessed mocks base method.
func (m *MockDatabaseHandler) LastProcessed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastProcessed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LastProcessed indicates an expected call of LastProcessed.
func (mr *MockDatabaseHandlerMockRecorder) LastProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastProcessed", reflect.TypeOf((*MockDatabaseHandler)(nil).LastProcessed))
}

// SaveLastProcessed mocks base method.
func (m *MockDatabaseHandler) SaveLastProcessed(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveLastProcessed", arg0)
}

// SaveLastProcessed indicates an expected call of SaveLastProcessed.
func (mr *MockDatabaseHandlerMockRecorder) SaveLastProcessed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLastProcessed", reflect.TypeOf((*MockDatabaseHandler)(nil).SaveLastProcessed), arg0)
}

// WriteEvent mocks base method.
func (m *MockDatabaseHandler) WriteEvent(schema model.EventSchema, tags map[string]string, timeStamp time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteEvent", schema, tags, timeStamp)
}

// WriteEvent indicates an expected call of WriteEvent.
func (mr *MockDatabaseHandlerMockRecorder) WriteEvent(schema, tags, timeStamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEvent", reflect.TypeOf((*MockDatabaseHandler)(nil).WriteEvent), schema, tags, timeStamp)
}

// WriteEventBlocking mocks base method.
func (m *MockDatabaseHandler) WriteEventBlocking(schema model.EventSchema, tags map[string]string, timeStamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteEventBlocking", schema, tags, timeStamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteEventBlocking indicates an expected call of WriteEventBlocking.
func (mr *MockDatabaseHandlerMockRecorder) WriteEventBlocking(schema, tags, timeStamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEventBlocking", reflect.TypeOf((*MockDatabaseHandler)(nil).WriteEventBlocking), schema, tags, timeStamp)
}

// WritePoint mocks base method.
func (m *MockDatabaseHandler) WritePoint(measurement string, tags map[string]string, fields map[string]interface{}, ts time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WritePoint", measurement, tags, fields, ts)
}

// WritePoint indicates an expected call of WritePoint.
func (mr *MockDatabaseHandlerMockRecorder) WritePoint(measurement, tags, fields, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePoint", reflect.TypeOf((*MockDatabaseHandler)(nil).WritePoint), measurement, tags, fields, ts)
}
