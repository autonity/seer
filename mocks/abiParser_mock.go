// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/abiParser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "seer/model"

	types "github.com/autonity/autonity/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockABIParser is a mock of ABIParser interface.
type MockABIParser struct {
	ctrl     *gomock.Controller
	recorder *MockABIParserMockRecorder
}

// MockABIParserMockRecorder is the mock recorder for MockABIParser.
type MockABIParserMockRecorder struct {
	mock *MockABIParser
}

// NewMockABIParser creates a new mock instance.
func NewMockABIParser(ctrl *gomock.Controller) *MockABIParser {
	mock := &MockABIParser{ctrl: ctrl}
	mock.recorder = &MockABIParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABIParser) EXPECT() *MockABIParserMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockABIParser) Decode(log types.Log) (model.EventSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", log)
	ret0, _ := ret[0].(model.EventSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockABIParserMockRecorder) Decode(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockABIParser)(nil).Decode), log)
}

// Parse mocks base method.
func (m *MockABIParser) Parse(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockABIParserMockRecorder) Parse(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockABIParser)(nil).Parse), filepath)
}

// Start mocks base method.
func (m *MockABIParser) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockABIParserMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockABIParser)(nil).Start))
}

// Stop mocks base method.
func (m *MockABIParser) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockABIParserMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockABIParser)(nil).Stop))
}
