// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/eventHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "Seer/model"
	net "Seer/net"
	reflect "reflect"

	types "github.com/autonity/autonity/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(schema model.EventSchema, block *types.Block, tags map[string]string, provider net.ConnectionProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", schema, block, tags, provider)
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(schema, block, tags, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), schema, block, tags, provider)
}
