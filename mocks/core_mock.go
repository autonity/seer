// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/core.go
//
// Generated by this command:
//
//	mockgen -source=./interfaces/core.go -destination=./mocks/core_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	interfaces "seer/interfaces"

	gomock "go.uber.org/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
	isgomock struct{}
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// ConnectionProvider mocks base method.
func (m *MockCore) ConnectionProvider() interfaces.ConnectionProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionProvider")
	ret0, _ := ret[0].(interfaces.ConnectionProvider)
	return ret0
}

// ConnectionProvider indicates an expected call of ConnectionProvider.
func (mr *MockCoreMockRecorder) ConnectionProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionProvider", reflect.TypeOf((*MockCore)(nil).ConnectionProvider))
}

// ProcessRange mocks base method.
func (m *MockCore) ProcessRange(ctx context.Context, start, end uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessRange", ctx, start, end)
}

// ProcessRange indicates an expected call of ProcessRange.
func (mr *MockCoreMockRecorder) ProcessRange(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRange", reflect.TypeOf((*MockCore)(nil).ProcessRange), ctx, start, end)
}

// Start mocks base method.
func (m *MockCore) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockCoreMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCore)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockCore) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCoreMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCore)(nil).Stop))
}

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
	isgomock struct{}
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockProcessor) Process() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process")
}

// Process indicates an expected call of Process.
func (mr *MockProcessorMockRecorder) Process() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process))
}
